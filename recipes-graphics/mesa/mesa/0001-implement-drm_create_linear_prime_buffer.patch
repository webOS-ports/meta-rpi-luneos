From f23a2917aed591d1cf1e015da0bdb51243b19279 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Fri, 7 Feb 2020 07:10:42 -0800
Subject: [PATCH] implement drm_create_linear_prime_buffer

Support wayland sink for gstreamer

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
Upstream-Status: Pending

 include/GL/internal/dri_interface.h         |  1 +
 src/egl/drivers/dri2/egl_dri2.c             |  3 ++-
 src/egl/wayland/wayland-drm/meson.build     |  1 +
 src/egl/wayland/wayland-drm/wayland-drm.c   | 28 +++++++++++++++++----
 src/egl/wayland/wayland-drm/wayland-drm.h   |  2 +-
 src/egl/wayland/wayland-drm/wayland-drm.xml | 12 +++++++++
 src/gallium/frontends/dri/dri2.c            | 21 +++++++++++++---
 src/gbm/backends/dri/gbm_dri.c              |  1 +
 src/loader/loader_dri3_helper.c             |  1 +
 9 files changed, 60 insertions(+), 10 deletions(-)

diff --git a/include/GL/internal/dri_interface.h b/include/GL/internal/dri_interface.h
index 10ce61e8eda..db38cacddcd 100644
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -1433,6 +1433,7 @@ struct __DRIimageExtensionRec {
     */
    __DRIimage *(*createImageFromFds)(__DRIscreen *screen,
                                      int width, int height, int fourcc,
+                                     uint64_t modifier,
                                      int *fds, int num_fds,
                                      int *strides, int *offsets,
                                      void *loaderPrivate);
diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 93e3af618f9..41a6f307d23 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -3188,7 +3188,7 @@ dri2_destroy_image_khr(_EGLDisplay *disp, _EGLImage *image)
 
 static void
 dri2_wl_reference_buffer(void *user_data, uint32_t name, int fd,
-                         struct wl_drm_buffer *buffer)
+                         struct wl_drm_buffer *buffer, uint64_t modifier)
 {
    _EGLDisplay *disp = user_data;
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
@@ -3209,6 +3209,7 @@ dri2_wl_reference_buffer(void *user_data, uint32_t name, int fd,
                                                 buffer->width,
                                                 buffer->height,
                                                 buffer->format,
+                                                modifier,
                                                 &fd, 1,
                                                 buffer->stride,
                                                 buffer->offset,
diff --git a/src/egl/wayland/wayland-drm/meson.build b/src/egl/wayland/wayland-drm/meson.build
index b4782a013c9..2b400b8fa49 100644
--- a/src/egl/wayland/wayland-drm/meson.build
+++ b/src/egl/wayland/wayland-drm/meson.build
@@ -45,6 +45,7 @@ libwayland_drm = static_library(
   'wayland_drm',
   ['wayland-drm.c', wayland_drm_protocol_c, wayland_drm_server_protocol_h],
   gnu_symbol_visibility : 'hidden',
+  include_directories : [inc_wayland_drm, inc_include],
   dependencies : [dep_wayland_server],
   build_by_default : false,
 )
diff --git a/src/egl/wayland/wayland-drm/wayland-drm.c b/src/egl/wayland/wayland-drm/wayland-drm.c
index 29558ea910e..d330f647d04 100644
--- a/src/egl/wayland/wayland-drm/wayland-drm.c
+++ b/src/egl/wayland/wayland-drm/wayland-drm.c
@@ -37,6 +37,8 @@
 #include "wayland-drm.h"
 #include "wayland-drm-server-protocol.h"
 
+#include "drm-uapi/drm_fourcc.h"
+
 #define MIN(x,y) (((x)<(y))?(x):(y))
 
 static void
@@ -59,7 +61,7 @@ static void
 create_buffer(struct wl_client *client, struct wl_resource *resource,
               uint32_t id, uint32_t name, int fd,
               int32_t width, int32_t height,
-              uint32_t format,
+              uint32_t format, uint64_t modifier,
               int32_t offset0, int32_t stride0,
               int32_t offset1, int32_t stride1,
               int32_t offset2, int32_t stride2)
@@ -84,7 +86,7 @@ create_buffer(struct wl_client *client, struct wl_resource *resource,
 	buffer->offset[2] = offset2;
 	buffer->stride[2] = stride2;
 
-        drm->callbacks.reference_buffer(drm->user_data, name, fd, buffer);
+	drm->callbacks.reference_buffer(drm->user_data, name, fd, buffer, modifier);
 	if (buffer->driver_buffer == NULL) {
 		wl_resource_post_error(resource,
 				       WL_DRM_ERROR_INVALID_NAME,
@@ -128,7 +130,8 @@ drm_create_buffer(struct wl_client *client, struct wl_resource *resource,
         }
 
         create_buffer(client, resource, id,
-                      name, -1, width, height, format, 0, stride, 0, 0, 0, 0);
+                      name, -1, width, height, format, DRM_FORMAT_MOD_INVALID,
+                      0, stride, 0, 0, 0, 0);
 }
 
 static void
@@ -157,6 +160,7 @@ drm_create_planar_buffer(struct wl_client *client,
         }
 
         create_buffer(client, resource, id, name, -1, width, height, format,
+                      DRM_FORMAT_MOD_INVALID,
                       offset0, stride0, offset1, stride1, offset2, stride2);
 }
 
@@ -170,10 +174,23 @@ drm_create_prime_buffer(struct wl_client *client,
                         int32_t offset2, int32_t stride2)
 {
         create_buffer(client, resource, id, 0, fd, width, height, format,
+                      DRM_FORMAT_MOD_INVALID,
                       offset0, stride0, offset1, stride1, offset2, stride2);
         close(fd);
 }
 
+static void
+drm_create_linear_prime_buffer(struct wl_client *client,
+                         struct wl_resource *resource,
+                         uint32_t id, int fd,
+                         int32_t width, int32_t height, uint32_t format,
+                        int32_t offset, int32_t stride)
+{
+        create_buffer(client, resource, id, 0, fd, width, height, format,
+                      DRM_FORMAT_MOD_LINEAR, offset, stride, 0, 0, 0, 0);
+        close(fd);
+}
+
 static void
 drm_authenticate(struct wl_client *client,
 		 struct wl_resource *resource, uint32_t id)
@@ -192,8 +209,9 @@ drm_authenticate(struct wl_client *client,
 static const struct wl_drm_interface drm_interface = {
 	drm_authenticate,
 	drm_create_buffer,
-        drm_create_planar_buffer,
-        drm_create_prime_buffer
+	drm_create_planar_buffer,
+	drm_create_prime_buffer,
+	drm_create_linear_prime_buffer
 };
 
 static void
diff --git a/src/egl/wayland/wayland-drm/wayland-drm.h b/src/egl/wayland/wayland-drm/wayland-drm.h
index 8b7fd3b0b64..2b4ffd0a681 100644
--- a/src/egl/wayland/wayland-drm/wayland-drm.h
+++ b/src/egl/wayland/wayland-drm/wayland-drm.h
@@ -11,7 +11,7 @@ struct wayland_drm_callbacks {
 	int (*authenticate)(void *user_data, uint32_t id);
 
 	void (*reference_buffer)(void *user_data, uint32_t name, int fd,
-                                 struct wl_drm_buffer *buffer);
+                           struct wl_drm_buffer *buffer, uint64_t modifier);
 
 	void (*release_buffer)(void *user_data, struct wl_drm_buffer *buffer);
 
diff --git a/src/egl/wayland/wayland-drm/wayland-drm.xml b/src/egl/wayland/wayland-drm/wayland-drm.xml
index eaf2654ab26..d6913d680ba 100644
--- a/src/egl/wayland/wayland-drm/wayland-drm.xml
+++ b/src/egl/wayland/wayland-drm/wayland-drm.xml
@@ -184,6 +184,18 @@
       <arg name="stride2" type="int"/>
     </request>
 
+    <!-- Create a wayland buffer for the prime fd.  Use for prime
+         buffers with LINEAR modifier. -->
+    <request name="create_linear_prime_buffer" since="2">
+      <arg name="id" type="new_id" interface="wl_buffer"/>
+      <arg name="name" type="fd"/>
+      <arg name="width" type="int"/>
+      <arg name="height" type="int"/>
+      <arg name="format" type="uint"/>
+      <arg name="offset" type="int"/>
+      <arg name="stride" type="int"/>
+    </request>
+
   </interface>
 
 </protocol>
diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 4b77601a82c..8d6bdb7d738 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1509,13 +1509,28 @@ dri2_from_planar(__DRIimage *image, int plane, void *loaderPrivate)
    return img;
 }
 
+static boolean
+dri2_query_dma_buf_modifiers(__DRIscreen *_screen, int fourcc, int max,
+                             uint64_t *modifiers, unsigned int *external_only,
+                             int *count);
+
 static __DRIimage *
 dri2_from_fds(__DRIscreen *screen, int width, int height, int fourcc,
-              int *fds, int num_fds, int *strides, int *offsets,
-              void *loaderPrivate)
+              uint64_t modifier, int *fds, int num_fds, int *strides,
+              int *offsets, void *loaderPrivate)
 {
+    if (modifier != DRM_FORMAT_MOD_LINEAR) {
+        /* For RGB16 format data since we are getting correct value of modifer
+         * as DRM_FORMAT_MOD_LINEAR no need for query of modifiers
+         */
+        unsigned int external_only= 0;
+        int count= 0;
+        boolean result;
+        result = dri2_query_dma_buf_modifiers( screen, fourcc, 1, &modifier, &external_only, &count);
+    }
+
    return dri2_create_image_from_fd(screen, width, height, fourcc,
-                                   DRM_FORMAT_MOD_INVALID, fds, num_fds,
+                                   modifier, fds, num_fds,
                                    strides, offsets, 0, NULL, loaderPrivate);
 }
 
diff --git a/src/gbm/backends/dri/gbm_dri.c b/src/gbm/backends/dri/gbm_dri.c
index 560b97f2b70..bc38c6991ca 100644
--- a/src/gbm/backends/dri/gbm_dri.c
+++ b/src/gbm/backends/dri/gbm_dri.c
@@ -1032,6 +1032,7 @@ gbm_dri_bo_import(struct gbm_device *gbm,
                                              fd_data->width,
                                              fd_data->height,
                                              fourcc,
+                                             DRM_FORMAT_MOD_INVALID,
                                              &fd_data->fd, 1,
                                              &stride, &offset,
                                              NULL);
diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index 8e775a4735f..49aefb46613 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -1853,6 +1853,7 @@ loader_dri3_create_image(xcb_connection_t *c,
                                             bp_reply->width,
                                             bp_reply->height,
                                             image_format_to_fourcc(format),
+                                            DRM_FORMAT_MOD_INVALID,
                                             fds, 1,
                                             &stride, &offset, loaderPrivate);
    close(fds[0]);
